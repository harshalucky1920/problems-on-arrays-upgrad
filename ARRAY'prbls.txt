ARRAYS:


//1-->3sum

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> HL = new HashSet<>();
        // sortin the arrays
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 2; i++) {
            int first = i + 1;
            int last = nums.length - 1;

            while (first < last) {
                if (nums[i] + nums[first] + nums[last] == 0) {
                    HL.add(Arrays.asList(nums[i], nums[first], nums[last]));
                    first++;
                    last--;
                } else if (nums[i] + nums[first] + nums[last] > 0) {
                    last--;
                } else {
                    first++;
                }
            }
        }
        return new ArrayList<>(HL);
    }
}

//==>TimeComplexity=o(n2) 

------------------------------------------------------------------------------------------------------------------


//2==>Move Zeroes

class Solution {
    public void moveZeroes(int[] nums) {
        int h=0;
        int count=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==0)
            {
                count++;
            }
            else{
                nums[h]=nums[i];
                h++;
            }
        }
        for(int i=h;i<h+count;i++){
            nums[i] = 0;
        }
    }
}

//Time Complexity: O(n)
//spaceComplexity: O(1)

------------------------------------------------------------------------------------------------------------------

//3==> Search in Rotated Sorted Array


class Solution {
    public int search(int[] nums, int target) {
        
        int first = 0;
        int last = nums.length-1;
        
        
        
         while (first <= last) {
            int mid = first + (last - first) / 2;

            if (nums[mid] == target) return mid;
            
            if (nums[mid] >= nums[first]) {
                if (target >= nums[first] && target <= nums[mid])
                    last = mid - 1;
                else first = mid + 1;

            } else {

                if (target >= nums[mid] && target <= nums[last])
                    first = mid + 1;
                else last = mid - 1;
            }
        }

        return -1;
    }
}
 
//==>Time Complexity: O(log N)
//==>Space Complexity: O(1)

------------------------------------------------------------------------------------------------------------------

//4==>Find Peak Element

class Solution {
    public int findPeakElement(int[] nums) {
        int h = 0, l = nums.length - 1;
        while (h < l) {
            int mid = (h + l) / 2;
            if (nums[mid] > nums[mid + 1])
                l = mid;
            else
                h = mid + 1;
        }
        return h;
        
    }
}

//==>Time Complexity O(Logn)
//==>Space Complexity O(log n)

------------------------------------------------------------------------------------------------------------------

//==>5Missing Number

class Solution {
    public int missingNumber(int[] nums) {
		
        int sum = nums.length*(nums.length+1)/2;
        
		for (int num : nums){
             sum -= num;
        }
           
        
		return sum;
    }
}

//==>Time complexity o(n)
//==>Space complexity o(1)
        
    
------------------------------------------------------------------------------------------------------------------

//6==>Single Number

class Solution {
    public int singleNumber(int[] nums) {
        if(nums.length==1){
            return nums[0];
        }
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i=i+2){
            if(i==nums.length-1){
                return nums[nums.length-1];
            }
            if(nums[i] !=nums[i+1]){
                 return nums[i];
            }
           
        }
        return 0;
    }
}

//==>Time complexity o(nlogn)
//==>space complexity o(1)

------------------------------------------------------------------------------------------------------------------

//==>7Contains Duplicate

class Solution {
    public boolean containsDuplicate(int[] nums) {
         int n = nums.length;
    
    HashMap<Integer, Integer> HL = new HashMap<>();
    
    for(int i = 0; i < n; i++){
        if(HL.containsKey(nums[i])){
            return true;
        }
        else{
            HL.put(nums[i], 1);
        }
    }
    return false;
    
   }
}

//==>Time complexity(n)
    
------------------------------------------------------------------------------------------------------------------

//9==>Find All Numbers Disappeared in an Array

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
       
        Arrays.sort(nums);
        List<Integer> list = new ArrayList<Integer>();
        HashSet<Integer> H = new HashSet<Integer>();
        for(int i=0; i<nums.length; i++){
            H.add(nums[i]);
        }
        int count=1;
        for(int i=0 ;i<nums.length; i++){
            if(H.contains(count)){
                count++;
            }
            else{
                list.add(count);
                count++;
            }
        }
        return list;
    }
    
}

//==>Time complexity o(n)
//==>space complexity o(n)

------------------------------------------------------------------------------------------------------------------

//==>10Product of Array Except Self

class Solution {
    public int[] productExceptSelf(int[] nums) {
       int[] har = new int[nums.length];
        
        int temp = 1;
        for(int i = 0; i < nums.length; i++){
            har[i] = temp;
            temp *= nums[i];
        }
        
        temp =1;
        for(int i = har.length-1; i >= 0; i--){
            har[i] *=  temp;
            temp *= nums[i];
        }
        
        return har;
    }
} 

//==>Time complexity o(n)
//==>space complexity o(1)

------------------------------------------------------------------------------------------------------------------